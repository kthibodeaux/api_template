services:
  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5432
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
      PGUSER: "postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    tty: true
    stdin_open: true
    stop_grace_period: 1s
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
    expose:
      - 3000
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:3000/health" ]
      start_period: 1m
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - rails_bundle:/usr/local/bundle
      - ./api:/home/rails/app
      - ./docker/api/entrypoint.sh:/home/rails/entrypoint.sh
    environment:
      RESEED: ${RESEED:-false}
      FRONTEND_URL: http://localhost
    depends_on:
      db:
        condition: service_healthy
    command: /home/rails/entrypoint.sh

  worker:
    tty: true
    stdin_open: true
    stop_grace_period: 1s
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7001/status" ]
      start_period: 1m
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - rails_bundle:/usr/local/bundle
      - ./api:/home/rails/app
      - ./docker/api/entrypoint-worker.sh:/home/rails/entrypoint.sh
    environment:
      FRONTEND_URL: http://localhost
    depends_on:
      api:
        condition: service_healthy
    command: /home/rails/entrypoint.sh

  frontend:
    tty: true
    stdin_open: true
    stop_grace_period: 1s
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
      target: base
    expose:
      - 5173
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:5173" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./frontend:/home/node/app
      - ./docker/frontend/entrypoint.sh:/home/node/entrypoint.sh
    environment:
      API_URL: http://localhost/api
    command: /home/node/entrypoint.sh

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

volumes:
  rails_bundle:
  postgres_data:
